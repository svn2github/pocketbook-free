# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_inkview', [dirname(__file__)])
        except ImportError:
            import _inkview
            return _inkview
        if fp is not None:
            try:
                _mod = imp.load_module('_inkview', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _inkview = swig_import_helper()
    del swig_import_helper
else:
    import _inkview
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


APP_UID = _inkview.APP_UID
APP_GID = _inkview.APP_GID
FLASHDIR = _inkview.FLASHDIR
SDCARDDIR = _inkview.SDCARDDIR
SYSTEMDATA = _inkview.SYSTEMDATA
USERDATA = _inkview.USERDATA
USERDATA2 = _inkview.USERDATA2
TEMPDIR = _inkview.TEMPDIR
SYSTEMFONTDIR = _inkview.SYSTEMFONTDIR
USERFONTDIR = _inkview.USERFONTDIR
TEMPFONTPATH = _inkview.TEMPFONTPATH
PHOTOTEMPDIR = _inkview.PHOTOTEMPDIR
CONFIGPATH = _inkview.CONFIGPATH
STATEPATH = _inkview.STATEPATH
SYSTEMTHEMESPATH = _inkview.SYSTEMTHEMESPATH
USERTHEMESPATH = _inkview.USERTHEMESPATH
GLOBALCONFIGFILE = _inkview.GLOBALCONFIGFILE
SYSTEMLANGPATH = _inkview.SYSTEMLANGPATH
USERLANGPATH = _inkview.USERLANGPATH
SYSTEMKBDPATH = _inkview.SYSTEMKBDPATH
USERKBDPATH = _inkview.USERKBDPATH
SYSTEMDICTPATH = _inkview.SYSTEMDICTPATH
USERDICTPATH1 = _inkview.USERDICTPATH1
USERDICTPATH2 = _inkview.USERDICTPATH2
SYSTEMLOGOPATH = _inkview.SYSTEMLOGOPATH
USERLOGOPATH = _inkview.USERLOGOPATH
NOTESPATH = _inkview.NOTESPATH
GAMEPATH = _inkview.GAMEPATH
USERAPPDIR = _inkview.USERAPPDIR
CACHEPATH = _inkview.CACHEPATH
USERBOOKSHELF = _inkview.USERBOOKSHELF
SYSTEMBOOKSHELF = _inkview.SYSTEMBOOKSHELF
USERMPD = _inkview.USERMPD
SYSTEMMPD = _inkview.SYSTEMMPD
USERMPLAYER = _inkview.USERMPLAYER
USERBOOKINFO = _inkview.USERBOOKINFO
POCKETBOOKSIG = _inkview.POCKETBOOKSIG
LASTOPENBOOKS = _inkview.LASTOPENBOOKS
FAVORITES = _inkview.FAVORITES
CURRENTBOOK = _inkview.CURRENTBOOK
BOOKSHELFSTATE = _inkview.BOOKSHELFSTATE
BOOKSHELFSTATE_NV = _inkview.BOOKSHELFSTATE_NV
HISTORYFILE = _inkview.HISTORYFILE
DICKEYBOARD = _inkview.DICKEYBOARD
DEFAULTFONT = _inkview.DEFAULTFONT
DEFAULTFONTB = _inkview.DEFAULTFONTB
DEFAULTFONTI = _inkview.DEFAULTFONTI
DEFAULTFONTBI = _inkview.DEFAULTFONTBI
SYSTEMDEPTH = _inkview.SYSTEMDEPTH
EVT_STARTOFLIST = _inkview.EVT_STARTOFLIST
EVT_INIT = _inkview.EVT_INIT
EVT_EXIT = _inkview.EVT_EXIT
EVT_SHOW = _inkview.EVT_SHOW
EVT_REPAINT = _inkview.EVT_REPAINT
EVT_HIDE = _inkview.EVT_HIDE
EVT_KEYDOWN = _inkview.EVT_KEYDOWN
EVT_KEYPRESS = _inkview.EVT_KEYPRESS
EVT_KEYUP = _inkview.EVT_KEYUP
EVT_KEYRELEASE = _inkview.EVT_KEYRELEASE
EVT_KEYREPEAT = _inkview.EVT_KEYREPEAT
EVT_POINTERUP = _inkview.EVT_POINTERUP
EVT_POINTERDOWN = _inkview.EVT_POINTERDOWN
EVT_POINTERMOVE = _inkview.EVT_POINTERMOVE
EVT_ORIENTATION = _inkview.EVT_ORIENTATION
EVT_ENDOFLIST = _inkview.EVT_ENDOFLIST
EVT_MP_STATECHANGED = _inkview.EVT_MP_STATECHANGED
EVT_MP_TRACKCHANGED = _inkview.EVT_MP_TRACKCHANGED
KEY_BACK = _inkview.KEY_BACK
KEY_DELETE = _inkview.KEY_DELETE
KEY_OK = _inkview.KEY_OK
KEY_UP = _inkview.KEY_UP
KEY_DOWN = _inkview.KEY_DOWN
KEY_LEFT = _inkview.KEY_LEFT
KEY_RIGHT = _inkview.KEY_RIGHT
KEY_MINUS = _inkview.KEY_MINUS
KEY_PLUS = _inkview.KEY_PLUS
KEY_MENU = _inkview.KEY_MENU
KEY_MUSIC = _inkview.KEY_MUSIC
KEY_POWER = _inkview.KEY_POWER
KEY_PREV = _inkview.KEY_PREV
KEY_NEXT = _inkview.KEY_NEXT
KEY_0 = _inkview.KEY_0
KEY_1 = _inkview.KEY_1
KEY_2 = _inkview.KEY_2
KEY_3 = _inkview.KEY_3
KEY_4 = _inkview.KEY_4
KEY_5 = _inkview.KEY_5
KEY_6 = _inkview.KEY_6
KEY_7 = _inkview.KEY_7
KEY_8 = _inkview.KEY_8
KEY_9 = _inkview.KEY_9
BLACK = _inkview.BLACK
DGRAY = _inkview.DGRAY
LGRAY = _inkview.LGRAY
WHITE = _inkview.WHITE
ITEM_HEADER = _inkview.ITEM_HEADER
ITEM_ACTIVE = _inkview.ITEM_ACTIVE
ITEM_INACTIVE = _inkview.ITEM_INACTIVE
ITEM_SUBMENU = _inkview.ITEM_SUBMENU
ITEM_SEPARATOR = _inkview.ITEM_SEPARATOR
ITEM_BULLET = _inkview.ITEM_BULLET
KBD_UPPER = _inkview.KBD_UPPER
KBD_LOWER = _inkview.KBD_LOWER
KBD_FIRSTUPPER = _inkview.KBD_FIRSTUPPER
ICON_INFORMATION = _inkview.ICON_INFORMATION
ICON_QUESTION = _inkview.ICON_QUESTION
ICON_WARNING = _inkview.ICON_WARNING
ICON_ERROR = _inkview.ICON_ERROR
DEF_BUTTON1 = _inkview.DEF_BUTTON1
DEF_BUTTON2 = _inkview.DEF_BUTTON2
LIST_BEGINPAINT = _inkview.LIST_BEGINPAINT
LIST_PAINT = _inkview.LIST_PAINT
LIST_ENDPAINT = _inkview.LIST_ENDPAINT
LIST_OPEN = _inkview.LIST_OPEN
LIST_MENU = _inkview.LIST_MENU
LIST_DELETE = _inkview.LIST_DELETE
LIST_EXIT = _inkview.LIST_EXIT
LIST_ORIENTATION = _inkview.LIST_ORIENTATION
BMK_CLOSED = _inkview.BMK_CLOSED
BMK_SELECTED = _inkview.BMK_SELECTED
BMK_ADDED = _inkview.BMK_ADDED
BMK_REMOVED = _inkview.BMK_REMOVED
BMK_PAINT = _inkview.BMK_PAINT
CFG_TEXT = _inkview.CFG_TEXT
CFG_CHOICE = _inkview.CFG_CHOICE
CFG_INDEX = _inkview.CFG_INDEX
CFG_TIME = _inkview.CFG_TIME
CFG_FONT = _inkview.CFG_FONT
CFG_FONTFACE = _inkview.CFG_FONTFACE
CFG_INFO = _inkview.CFG_INFO
CFG_SUBMENU = _inkview.CFG_SUBMENU
CFG_HIDDEN = _inkview.CFG_HIDDEN
ALIGN_LEFT = _inkview.ALIGN_LEFT
ALIGN_CENTER = _inkview.ALIGN_CENTER
ALIGN_RIGHT = _inkview.ALIGN_RIGHT
ALIGN_FIT = _inkview.ALIGN_FIT
VALIGN_TOP = _inkview.VALIGN_TOP
VALIGN_MIDDLE = _inkview.VALIGN_MIDDLE
VALIGN_BOTTOM = _inkview.VALIGN_BOTTOM
ROTATE = _inkview.ROTATE
HYPHENS = _inkview.HYPHENS
DOTS = _inkview.DOTS
ARROW_LEFT = _inkview.ARROW_LEFT
ARROW_RIGHT = _inkview.ARROW_RIGHT
ARROW_UP = _inkview.ARROW_UP
ARROW_DOWN = _inkview.ARROW_DOWN
SYMBOL_OK = _inkview.SYMBOL_OK
SYMBOL_PAUSE = _inkview.SYMBOL_PAUSE
SYMBOL_BULLET = _inkview.SYMBOL_BULLET
ARROW_UPDOWN = _inkview.ARROW_UPDOWN
IMAGE_BW = _inkview.IMAGE_BW
IMAGE_GRAY2 = _inkview.IMAGE_GRAY2
IMAGE_GRAY4 = _inkview.IMAGE_GRAY4
IMAGE_GRAY8 = _inkview.IMAGE_GRAY8
IMAGE_RGB = _inkview.IMAGE_RGB
ROTATE0 = _inkview.ROTATE0
ROTATE90 = _inkview.ROTATE90
ROTATE270 = _inkview.ROTATE270
ROTATE180 = _inkview.ROTATE180
XMIRROR = _inkview.XMIRROR
YMIRROR = _inkview.YMIRROR
DITHER_THRESHOLD = _inkview.DITHER_THRESHOLD
DITHER_PATTERN = _inkview.DITHER_PATTERN
DITHER_DIFFUSION = _inkview.DITHER_DIFFUSION
MP_STOPPED = _inkview.MP_STOPPED
MP_REQUEST_FOR_PLAY = _inkview.MP_REQUEST_FOR_PLAY
MP_PLAYING = _inkview.MP_PLAYING
MP_PAUSED = _inkview.MP_PAUSED
MP_PREVTRACK = _inkview.MP_PREVTRACK
MP_NEXTTRACK = _inkview.MP_NEXTTRACK
MP_ONCE = _inkview.MP_ONCE
MP_CONTINUOUS = _inkview.MP_CONTINUOUS
MP_RANDOM = _inkview.MP_RANDOM
FTYPE_UNKNOWN = _inkview.FTYPE_UNKNOWN
FTYPE_BOOK = _inkview.FTYPE_BOOK
FTYPE_PICTURE = _inkview.FTYPE_PICTURE
FTYPE_MUSIC = _inkview.FTYPE_MUSIC
FTYPE_APPLICATION = _inkview.FTYPE_APPLICATION
FTYPE_FOLDER = _inkview.FTYPE_FOLDER
GSENSOR_OFF = _inkview.GSENSOR_OFF
GSENSOR_ON = _inkview.GSENSOR_ON
GSENSOR_INTR = _inkview.GSENSOR_INTR
class irect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, irect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, irect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _inkview.irect_x_set
    __swig_getmethods__["x"] = _inkview.irect_x_get
    if _newclass:x = _swig_property(_inkview.irect_x_get, _inkview.irect_x_set)
    __swig_setmethods__["y"] = _inkview.irect_y_set
    __swig_getmethods__["y"] = _inkview.irect_y_get
    if _newclass:y = _swig_property(_inkview.irect_y_get, _inkview.irect_y_set)
    __swig_setmethods__["w"] = _inkview.irect_w_set
    __swig_getmethods__["w"] = _inkview.irect_w_get
    if _newclass:w = _swig_property(_inkview.irect_w_get, _inkview.irect_w_set)
    __swig_setmethods__["h"] = _inkview.irect_h_set
    __swig_getmethods__["h"] = _inkview.irect_h_get
    if _newclass:h = _swig_property(_inkview.irect_h_get, _inkview.irect_h_set)
    __swig_setmethods__["flags"] = _inkview.irect_flags_set
    __swig_getmethods__["flags"] = _inkview.irect_flags_get
    if _newclass:flags = _swig_property(_inkview.irect_flags_get, _inkview.irect_flags_set)
    def __init__(self): 
        this = _inkview.new_irect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_irect
    __del__ = lambda self : None;
irect_swigregister = _inkview.irect_swigregister
irect_swigregister(irect)

class ibitmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ibitmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ibitmap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _inkview.ibitmap_width_set
    __swig_getmethods__["width"] = _inkview.ibitmap_width_get
    if _newclass:width = _swig_property(_inkview.ibitmap_width_get, _inkview.ibitmap_width_set)
    __swig_setmethods__["height"] = _inkview.ibitmap_height_set
    __swig_getmethods__["height"] = _inkview.ibitmap_height_get
    if _newclass:height = _swig_property(_inkview.ibitmap_height_get, _inkview.ibitmap_height_set)
    __swig_setmethods__["depth"] = _inkview.ibitmap_depth_set
    __swig_getmethods__["depth"] = _inkview.ibitmap_depth_get
    if _newclass:depth = _swig_property(_inkview.ibitmap_depth_get, _inkview.ibitmap_depth_set)
    __swig_setmethods__["scanline"] = _inkview.ibitmap_scanline_set
    __swig_getmethods__["scanline"] = _inkview.ibitmap_scanline_get
    if _newclass:scanline = _swig_property(_inkview.ibitmap_scanline_get, _inkview.ibitmap_scanline_set)
    __swig_setmethods__["data"] = _inkview.ibitmap_data_set
    __swig_getmethods__["data"] = _inkview.ibitmap_data_get
    if _newclass:data = _swig_property(_inkview.ibitmap_data_get, _inkview.ibitmap_data_set)
    def __init__(self): 
        this = _inkview.new_ibitmap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_ibitmap
    __del__ = lambda self : None;
ibitmap_swigregister = _inkview.ibitmap_swigregister
ibitmap_swigregister(ibitmap)

class ihash_item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ihash_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ihash_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _inkview.ihash_item_name_set
    __swig_getmethods__["name"] = _inkview.ihash_item_name_get
    if _newclass:name = _swig_property(_inkview.ihash_item_name_get, _inkview.ihash_item_name_set)
    __swig_setmethods__["value"] = _inkview.ihash_item_value_set
    __swig_getmethods__["value"] = _inkview.ihash_item_value_get
    if _newclass:value = _swig_property(_inkview.ihash_item_value_get, _inkview.ihash_item_value_set)
    __swig_setmethods__["next"] = _inkview.ihash_item_next_set
    __swig_getmethods__["next"] = _inkview.ihash_item_next_get
    if _newclass:next = _swig_property(_inkview.ihash_item_next_get, _inkview.ihash_item_next_set)
    def __init__(self): 
        this = _inkview.new_ihash_item()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_ihash_item
    __del__ = lambda self : None;
ihash_item_swigregister = _inkview.ihash_item_swigregister
ihash_item_swigregister(ihash_item)

class ihash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ihash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ihash, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prime"] = _inkview.ihash_prime_set
    __swig_getmethods__["prime"] = _inkview.ihash_prime_get
    if _newclass:prime = _swig_property(_inkview.ihash_prime_get, _inkview.ihash_prime_set)
    __swig_setmethods__["count"] = _inkview.ihash_count_set
    __swig_getmethods__["count"] = _inkview.ihash_count_get
    if _newclass:count = _swig_property(_inkview.ihash_count_get, _inkview.ihash_count_set)
    __swig_setmethods__["addproc"] = _inkview.ihash_addproc_set
    __swig_getmethods__["addproc"] = _inkview.ihash_addproc_get
    if _newclass:addproc = _swig_property(_inkview.ihash_addproc_get, _inkview.ihash_addproc_set)
    __swig_setmethods__["delproc"] = _inkview.ihash_delproc_set
    __swig_getmethods__["delproc"] = _inkview.ihash_delproc_get
    if _newclass:delproc = _swig_property(_inkview.ihash_delproc_get, _inkview.ihash_delproc_set)
    __swig_setmethods__["items"] = _inkview.ihash_items_set
    __swig_getmethods__["items"] = _inkview.ihash_items_get
    if _newclass:items = _swig_property(_inkview.ihash_items_get, _inkview.ihash_items_set)
    def __init__(self): 
        this = _inkview.new_ihash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_ihash
    __del__ = lambda self : None;
ihash_swigregister = _inkview.ihash_swigregister
ihash_swigregister(ihash)

class imenu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imenu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imenu, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _inkview.imenu_type_set
    __swig_getmethods__["type"] = _inkview.imenu_type_get
    if _newclass:type = _swig_property(_inkview.imenu_type_get, _inkview.imenu_type_set)
    __swig_setmethods__["index"] = _inkview.imenu_index_set
    __swig_getmethods__["index"] = _inkview.imenu_index_get
    if _newclass:index = _swig_property(_inkview.imenu_index_get, _inkview.imenu_index_set)
    __swig_setmethods__["text"] = _inkview.imenu_text_set
    __swig_getmethods__["text"] = _inkview.imenu_text_get
    if _newclass:text = _swig_property(_inkview.imenu_text_get, _inkview.imenu_text_set)
    __swig_setmethods__["submenu"] = _inkview.imenu_submenu_set
    __swig_getmethods__["submenu"] = _inkview.imenu_submenu_get
    if _newclass:submenu = _swig_property(_inkview.imenu_submenu_get, _inkview.imenu_submenu_set)
    def __init__(self): 
        this = _inkview.new_imenu()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_imenu
    __del__ = lambda self : None;
imenu_swigregister = _inkview.imenu_swigregister
imenu_swigregister(imenu)

class icanvas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, icanvas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, icanvas, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _inkview.icanvas_width_set
    __swig_getmethods__["width"] = _inkview.icanvas_width_get
    if _newclass:width = _swig_property(_inkview.icanvas_width_get, _inkview.icanvas_width_set)
    __swig_setmethods__["height"] = _inkview.icanvas_height_set
    __swig_getmethods__["height"] = _inkview.icanvas_height_get
    if _newclass:height = _swig_property(_inkview.icanvas_height_get, _inkview.icanvas_height_set)
    __swig_setmethods__["scanline"] = _inkview.icanvas_scanline_set
    __swig_getmethods__["scanline"] = _inkview.icanvas_scanline_get
    if _newclass:scanline = _swig_property(_inkview.icanvas_scanline_get, _inkview.icanvas_scanline_set)
    __swig_setmethods__["depth"] = _inkview.icanvas_depth_set
    __swig_getmethods__["depth"] = _inkview.icanvas_depth_get
    if _newclass:depth = _swig_property(_inkview.icanvas_depth_get, _inkview.icanvas_depth_set)
    __swig_setmethods__["clipx1"] = _inkview.icanvas_clipx1_set
    __swig_getmethods__["clipx1"] = _inkview.icanvas_clipx1_get
    if _newclass:clipx1 = _swig_property(_inkview.icanvas_clipx1_get, _inkview.icanvas_clipx1_set)
    __swig_setmethods__["clipx2"] = _inkview.icanvas_clipx2_set
    __swig_getmethods__["clipx2"] = _inkview.icanvas_clipx2_get
    if _newclass:clipx2 = _swig_property(_inkview.icanvas_clipx2_get, _inkview.icanvas_clipx2_set)
    __swig_setmethods__["clipy1"] = _inkview.icanvas_clipy1_set
    __swig_getmethods__["clipy1"] = _inkview.icanvas_clipy1_get
    if _newclass:clipy1 = _swig_property(_inkview.icanvas_clipy1_get, _inkview.icanvas_clipy1_set)
    __swig_setmethods__["clipy2"] = _inkview.icanvas_clipy2_set
    __swig_getmethods__["clipy2"] = _inkview.icanvas_clipy2_get
    if _newclass:clipy2 = _swig_property(_inkview.icanvas_clipy2_get, _inkview.icanvas_clipy2_set)
    __swig_setmethods__["addr"] = _inkview.icanvas_addr_set
    __swig_getmethods__["addr"] = _inkview.icanvas_addr_get
    if _newclass:addr = _swig_property(_inkview.icanvas_addr_get, _inkview.icanvas_addr_set)
    def __init__(self): 
        this = _inkview.new_icanvas()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_icanvas
    __del__ = lambda self : None;
icanvas_swigregister = _inkview.icanvas_swigregister
icanvas_swigregister(icanvas)

class ifont(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ifont, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ifont, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _inkview.ifont_name_set
    __swig_getmethods__["name"] = _inkview.ifont_name_get
    if _newclass:name = _swig_property(_inkview.ifont_name_get, _inkview.ifont_name_set)
    __swig_setmethods__["family"] = _inkview.ifont_family_set
    __swig_getmethods__["family"] = _inkview.ifont_family_get
    if _newclass:family = _swig_property(_inkview.ifont_family_get, _inkview.ifont_family_set)
    __swig_setmethods__["size"] = _inkview.ifont_size_set
    __swig_getmethods__["size"] = _inkview.ifont_size_get
    if _newclass:size = _swig_property(_inkview.ifont_size_get, _inkview.ifont_size_set)
    __swig_setmethods__["aa"] = _inkview.ifont_aa_set
    __swig_getmethods__["aa"] = _inkview.ifont_aa_get
    if _newclass:aa = _swig_property(_inkview.ifont_aa_get, _inkview.ifont_aa_set)
    __swig_setmethods__["isbold"] = _inkview.ifont_isbold_set
    __swig_getmethods__["isbold"] = _inkview.ifont_isbold_get
    if _newclass:isbold = _swig_property(_inkview.ifont_isbold_get, _inkview.ifont_isbold_set)
    __swig_setmethods__["isitalic"] = _inkview.ifont_isitalic_set
    __swig_getmethods__["isitalic"] = _inkview.ifont_isitalic_get
    if _newclass:isitalic = _swig_property(_inkview.ifont_isitalic_get, _inkview.ifont_isitalic_set)
    __swig_setmethods__["_r1"] = _inkview.ifont__r1_set
    __swig_getmethods__["_r1"] = _inkview.ifont__r1_get
    if _newclass:_r1 = _swig_property(_inkview.ifont__r1_get, _inkview.ifont__r1_set)
    __swig_setmethods__["charset"] = _inkview.ifont_charset_set
    __swig_getmethods__["charset"] = _inkview.ifont_charset_get
    if _newclass:charset = _swig_property(_inkview.ifont_charset_get, _inkview.ifont_charset_set)
    __swig_setmethods__["_r2"] = _inkview.ifont__r2_set
    __swig_getmethods__["_r2"] = _inkview.ifont__r2_get
    if _newclass:_r2 = _swig_property(_inkview.ifont__r2_get, _inkview.ifont__r2_set)
    __swig_setmethods__["color"] = _inkview.ifont_color_set
    __swig_getmethods__["color"] = _inkview.ifont_color_get
    if _newclass:color = _swig_property(_inkview.ifont_color_get, _inkview.ifont_color_set)
    __swig_setmethods__["height"] = _inkview.ifont_height_set
    __swig_getmethods__["height"] = _inkview.ifont_height_get
    if _newclass:height = _swig_property(_inkview.ifont_height_get, _inkview.ifont_height_set)
    __swig_setmethods__["linespacing"] = _inkview.ifont_linespacing_set
    __swig_getmethods__["linespacing"] = _inkview.ifont_linespacing_get
    if _newclass:linespacing = _swig_property(_inkview.ifont_linespacing_get, _inkview.ifont_linespacing_set)
    __swig_setmethods__["baseline"] = _inkview.ifont_baseline_set
    __swig_getmethods__["baseline"] = _inkview.ifont_baseline_get
    if _newclass:baseline = _swig_property(_inkview.ifont_baseline_get, _inkview.ifont_baseline_set)
    __swig_setmethods__["fdata"] = _inkview.ifont_fdata_set
    __swig_getmethods__["fdata"] = _inkview.ifont_fdata_get
    if _newclass:fdata = _swig_property(_inkview.ifont_fdata_get, _inkview.ifont_fdata_set)
    def __init__(self): 
        this = _inkview.new_ifont()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_ifont
    __del__ = lambda self : None;
ifont_swigregister = _inkview.ifont_swigregister
ifont_swigregister(ifont)

class iconfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iconfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iconfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _inkview.iconfig_filename_set
    __swig_getmethods__["filename"] = _inkview.iconfig_filename_get
    if _newclass:filename = _swig_property(_inkview.iconfig_filename_get, _inkview.iconfig_filename_set)
    __swig_setmethods__["hash"] = _inkview.iconfig_hash_set
    __swig_getmethods__["hash"] = _inkview.iconfig_hash_get
    if _newclass:hash = _swig_property(_inkview.iconfig_hash_get, _inkview.iconfig_hash_set)
    __swig_setmethods__["changed"] = _inkview.iconfig_changed_set
    __swig_getmethods__["changed"] = _inkview.iconfig_changed_get
    if _newclass:changed = _swig_property(_inkview.iconfig_changed_get, _inkview.iconfig_changed_set)
    def __init__(self): 
        this = _inkview.new_iconfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_iconfig
    __del__ = lambda self : None;
iconfig_swigregister = _inkview.iconfig_swigregister
iconfig_swigregister(iconfig)

class iconfigedit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iconfigedit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iconfigedit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _inkview.iconfigedit_type_set
    __swig_getmethods__["type"] = _inkview.iconfigedit_type_get
    if _newclass:type = _swig_property(_inkview.iconfigedit_type_get, _inkview.iconfigedit_type_set)
    __swig_setmethods__["icon"] = _inkview.iconfigedit_icon_set
    __swig_getmethods__["icon"] = _inkview.iconfigedit_icon_get
    if _newclass:icon = _swig_property(_inkview.iconfigedit_icon_get, _inkview.iconfigedit_icon_set)
    __swig_setmethods__["text"] = _inkview.iconfigedit_text_set
    __swig_getmethods__["text"] = _inkview.iconfigedit_text_get
    if _newclass:text = _swig_property(_inkview.iconfigedit_text_get, _inkview.iconfigedit_text_set)
    __swig_setmethods__["hint"] = _inkview.iconfigedit_hint_set
    __swig_getmethods__["hint"] = _inkview.iconfigedit_hint_get
    if _newclass:hint = _swig_property(_inkview.iconfigedit_hint_get, _inkview.iconfigedit_hint_set)
    __swig_setmethods__["name"] = _inkview.iconfigedit_name_set
    __swig_getmethods__["name"] = _inkview.iconfigedit_name_get
    if _newclass:name = _swig_property(_inkview.iconfigedit_name_get, _inkview.iconfigedit_name_set)
    __swig_setmethods__["deflt"] = _inkview.iconfigedit_deflt_set
    __swig_getmethods__["deflt"] = _inkview.iconfigedit_deflt_get
    if _newclass:deflt = _swig_property(_inkview.iconfigedit_deflt_get, _inkview.iconfigedit_deflt_set)
    __swig_setmethods__["variants"] = _inkview.iconfigedit_variants_set
    __swig_getmethods__["variants"] = _inkview.iconfigedit_variants_get
    if _newclass:variants = _swig_property(_inkview.iconfigedit_variants_get, _inkview.iconfigedit_variants_set)
    __swig_setmethods__["submenu"] = _inkview.iconfigedit_submenu_set
    __swig_getmethods__["submenu"] = _inkview.iconfigedit_submenu_get
    if _newclass:submenu = _swig_property(_inkview.iconfigedit_submenu_get, _inkview.iconfigedit_submenu_set)
    def __init__(self): 
        this = _inkview.new_iconfigedit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_iconfigedit
    __del__ = lambda self : None;
iconfigedit_swigregister = _inkview.iconfigedit_swigregister
iconfigedit_swigregister(iconfigedit)

class tocentry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tocentry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tocentry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["level"] = _inkview.tocentry_level_set
    __swig_getmethods__["level"] = _inkview.tocentry_level_get
    if _newclass:level = _swig_property(_inkview.tocentry_level_get, _inkview.tocentry_level_set)
    __swig_setmethods__["page"] = _inkview.tocentry_page_set
    __swig_getmethods__["page"] = _inkview.tocentry_page_get
    if _newclass:page = _swig_property(_inkview.tocentry_page_get, _inkview.tocentry_page_set)
    __swig_setmethods__["position"] = _inkview.tocentry_position_set
    __swig_getmethods__["position"] = _inkview.tocentry_position_get
    if _newclass:position = _swig_property(_inkview.tocentry_position_get, _inkview.tocentry_position_set)
    __swig_setmethods__["text"] = _inkview.tocentry_text_set
    __swig_getmethods__["text"] = _inkview.tocentry_text_get
    if _newclass:text = _swig_property(_inkview.tocentry_text_get, _inkview.tocentry_text_set)
    def __init__(self): 
        this = _inkview.new_tocentry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_tocentry
    __del__ = lambda self : None;
tocentry_swigregister = _inkview.tocentry_swigregister
tocentry_swigregister(tocentry)

class bookinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bookinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bookinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _inkview.bookinfo_type_set
    __swig_getmethods__["type"] = _inkview.bookinfo_type_get
    if _newclass:type = _swig_property(_inkview.bookinfo_type_get, _inkview.bookinfo_type_set)
    __swig_setmethods__["typedesc"] = _inkview.bookinfo_typedesc_set
    __swig_getmethods__["typedesc"] = _inkview.bookinfo_typedesc_get
    if _newclass:typedesc = _swig_property(_inkview.bookinfo_typedesc_get, _inkview.bookinfo_typedesc_set)
    __swig_setmethods__["path"] = _inkview.bookinfo_path_set
    __swig_getmethods__["path"] = _inkview.bookinfo_path_get
    if _newclass:path = _swig_property(_inkview.bookinfo_path_get, _inkview.bookinfo_path_set)
    __swig_setmethods__["filename"] = _inkview.bookinfo_filename_set
    __swig_getmethods__["filename"] = _inkview.bookinfo_filename_get
    if _newclass:filename = _swig_property(_inkview.bookinfo_filename_get, _inkview.bookinfo_filename_set)
    __swig_setmethods__["title"] = _inkview.bookinfo_title_set
    __swig_getmethods__["title"] = _inkview.bookinfo_title_get
    if _newclass:title = _swig_property(_inkview.bookinfo_title_get, _inkview.bookinfo_title_set)
    __swig_setmethods__["author"] = _inkview.bookinfo_author_set
    __swig_getmethods__["author"] = _inkview.bookinfo_author_get
    if _newclass:author = _swig_property(_inkview.bookinfo_author_get, _inkview.bookinfo_author_set)
    __swig_setmethods__["series"] = _inkview.bookinfo_series_set
    __swig_getmethods__["series"] = _inkview.bookinfo_series_get
    if _newclass:series = _swig_property(_inkview.bookinfo_series_get, _inkview.bookinfo_series_set)
    __swig_setmethods__["genre"] = _inkview.bookinfo_genre_set
    __swig_getmethods__["genre"] = _inkview.bookinfo_genre_get
    if _newclass:genre = _swig_property(_inkview.bookinfo_genre_get, _inkview.bookinfo_genre_set)
    __swig_setmethods__["icon"] = _inkview.bookinfo_icon_set
    __swig_getmethods__["icon"] = _inkview.bookinfo_icon_get
    if _newclass:icon = _swig_property(_inkview.bookinfo_icon_get, _inkview.bookinfo_icon_set)
    __swig_setmethods__["year"] = _inkview.bookinfo_year_set
    __swig_getmethods__["year"] = _inkview.bookinfo_year_get
    if _newclass:year = _swig_property(_inkview.bookinfo_year_get, _inkview.bookinfo_year_set)
    __swig_setmethods__["size"] = _inkview.bookinfo_size_set
    __swig_getmethods__["size"] = _inkview.bookinfo_size_get
    if _newclass:size = _swig_property(_inkview.bookinfo_size_get, _inkview.bookinfo_size_set)
    __swig_setmethods__["ctime"] = _inkview.bookinfo_ctime_set
    __swig_getmethods__["ctime"] = _inkview.bookinfo_ctime_get
    if _newclass:ctime = _swig_property(_inkview.bookinfo_ctime_get, _inkview.bookinfo_ctime_set)
    def __init__(self): 
        this = _inkview.new_bookinfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_bookinfo
    __del__ = lambda self : None;
bookinfo_swigregister = _inkview.bookinfo_swigregister
bookinfo_swigregister(bookinfo)

class iv_filetype(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iv_filetype, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iv_filetype, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extension"] = _inkview.iv_filetype_extension_set
    __swig_getmethods__["extension"] = _inkview.iv_filetype_extension_get
    if _newclass:extension = _swig_property(_inkview.iv_filetype_extension_get, _inkview.iv_filetype_extension_set)
    __swig_setmethods__["description"] = _inkview.iv_filetype_description_set
    __swig_getmethods__["description"] = _inkview.iv_filetype_description_get
    if _newclass:description = _swig_property(_inkview.iv_filetype_description_get, _inkview.iv_filetype_description_set)
    __swig_setmethods__["type"] = _inkview.iv_filetype_type_set
    __swig_getmethods__["type"] = _inkview.iv_filetype_type_get
    if _newclass:type = _swig_property(_inkview.iv_filetype_type_get, _inkview.iv_filetype_type_set)
    __swig_setmethods__["program"] = _inkview.iv_filetype_program_set
    __swig_getmethods__["program"] = _inkview.iv_filetype_program_get
    if _newclass:program = _swig_property(_inkview.iv_filetype_program_get, _inkview.iv_filetype_program_set)
    __swig_setmethods__["icon"] = _inkview.iv_filetype_icon_set
    __swig_getmethods__["icon"] = _inkview.iv_filetype_icon_get
    if _newclass:icon = _swig_property(_inkview.iv_filetype_icon_get, _inkview.iv_filetype_icon_set)
    def __init__(self): 
        this = _inkview.new_iv_filetype()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_iv_filetype
    __del__ = lambda self : None;
iv_filetype_swigregister = _inkview.iv_filetype_swigregister
iv_filetype_swigregister(iv_filetype)

class iv_wlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iv_wlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iv_wlist, name)
    __repr__ = _swig_repr
    __swig_setmethods__["word"] = _inkview.iv_wlist_word_set
    __swig_getmethods__["word"] = _inkview.iv_wlist_word_get
    if _newclass:word = _swig_property(_inkview.iv_wlist_word_get, _inkview.iv_wlist_word_set)
    __swig_setmethods__["x1"] = _inkview.iv_wlist_x1_set
    __swig_getmethods__["x1"] = _inkview.iv_wlist_x1_get
    if _newclass:x1 = _swig_property(_inkview.iv_wlist_x1_get, _inkview.iv_wlist_x1_set)
    __swig_setmethods__["y1"] = _inkview.iv_wlist_y1_set
    __swig_getmethods__["y1"] = _inkview.iv_wlist_y1_get
    if _newclass:y1 = _swig_property(_inkview.iv_wlist_y1_get, _inkview.iv_wlist_y1_set)
    __swig_setmethods__["x2"] = _inkview.iv_wlist_x2_set
    __swig_getmethods__["x2"] = _inkview.iv_wlist_x2_get
    if _newclass:x2 = _swig_property(_inkview.iv_wlist_x2_get, _inkview.iv_wlist_x2_set)
    __swig_setmethods__["y2"] = _inkview.iv_wlist_y2_set
    __swig_getmethods__["y2"] = _inkview.iv_wlist_y2_get
    if _newclass:y2 = _swig_property(_inkview.iv_wlist_y2_get, _inkview.iv_wlist_y2_set)
    def __init__(self): 
        this = _inkview.new_iv_wlist()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _inkview.delete_iv_wlist
    __del__ = lambda self : None;
iv_wlist_swigregister = _inkview.iv_wlist_swigregister
iv_wlist_swigregister(iv_wlist)


def OpenScreen() -> "void" :
  return _inkview.OpenScreen()
OpenScreen = _inkview.OpenScreen

def CloseApp() -> "void" :
  return _inkview.CloseApp()
CloseApp = _inkview.CloseApp

def ScreenWidth() -> "int" :
  return _inkview.ScreenWidth()
ScreenWidth = _inkview.ScreenWidth

def ScreenHeight() -> "int" :
  return _inkview.ScreenHeight()
ScreenHeight = _inkview.ScreenHeight

def SetOrientation(*args) -> "void" :
  return _inkview.SetOrientation(*args)
SetOrientation = _inkview.SetOrientation

def GetOrientation() -> "int" :
  return _inkview.GetOrientation()
GetOrientation = _inkview.GetOrientation

def SetGlobalOrientation(*args) -> "void" :
  return _inkview.SetGlobalOrientation(*args)
SetGlobalOrientation = _inkview.SetGlobalOrientation

def GetGlobalOrientation(*args) -> "int" :
  return _inkview.GetGlobalOrientation(*args)
GetGlobalOrientation = _inkview.GetGlobalOrientation

def QueryGSensor() -> "int" :
  return _inkview.QueryGSensor()
QueryGSensor = _inkview.QueryGSensor

def SetGSensor(*args) -> "void" :
  return _inkview.SetGSensor(*args)
SetGSensor = _inkview.SetGSensor

def ReadGSensor(*args) -> "int" :
  return _inkview.ReadGSensor(*args)
ReadGSensor = _inkview.ReadGSensor

def ClearScreen() -> "void" :
  return _inkview.ClearScreen()
ClearScreen = _inkview.ClearScreen

def SetClip(*args) -> "void" :
  return _inkview.SetClip(*args)
SetClip = _inkview.SetClip

def DrawPixel(*args) -> "void" :
  return _inkview.DrawPixel(*args)
DrawPixel = _inkview.DrawPixel

def DrawLine(*args) -> "void" :
  return _inkview.DrawLine(*args)
DrawLine = _inkview.DrawLine

def DrawRect(*args) -> "void" :
  return _inkview.DrawRect(*args)
DrawRect = _inkview.DrawRect

def FillArea(*args) -> "void" :
  return _inkview.FillArea(*args)
FillArea = _inkview.FillArea

def InvertArea(*args) -> "void" :
  return _inkview.InvertArea(*args)
InvertArea = _inkview.InvertArea

def InvertAreaBW(*args) -> "void" :
  return _inkview.InvertAreaBW(*args)
InvertAreaBW = _inkview.InvertAreaBW

def DimArea(*args) -> "void" :
  return _inkview.DimArea(*args)
DimArea = _inkview.DimArea

def DrawSelection(*args) -> "void" :
  return _inkview.DrawSelection(*args)
DrawSelection = _inkview.DrawSelection

def DitherArea(*args) -> "void" :
  return _inkview.DitherArea(*args)
DitherArea = _inkview.DitherArea

def Stretch(*args) -> "void" :
  return _inkview.Stretch(*args)
Stretch = _inkview.Stretch

def SetCanvas(*args) -> "void" :
  return _inkview.SetCanvas(*args)
SetCanvas = _inkview.SetCanvas

def GetCanvas() -> "icanvas *" :
  return _inkview.GetCanvas()
GetCanvas = _inkview.GetCanvas

def Repaint() -> "void" :
  return _inkview.Repaint()
Repaint = _inkview.Repaint

def LoadBitmap(*args) -> "ibitmap *" :
  return _inkview.LoadBitmap(*args)
LoadBitmap = _inkview.LoadBitmap

def BitmapFromScreen(*args) -> "ibitmap *" :
  return _inkview.BitmapFromScreen(*args)
BitmapFromScreen = _inkview.BitmapFromScreen

def NewBitmap(*args) -> "ibitmap *" :
  return _inkview.NewBitmap(*args)
NewBitmap = _inkview.NewBitmap

def LoadJPEG(*args) -> "ibitmap *" :
  return _inkview.LoadJPEG(*args)
LoadJPEG = _inkview.LoadJPEG

def DrawBitmap(*args) -> "void" :
  return _inkview.DrawBitmap(*args)
DrawBitmap = _inkview.DrawBitmap

def DrawBitmapArea(*args) -> "void" :
  return _inkview.DrawBitmapArea(*args)
DrawBitmapArea = _inkview.DrawBitmapArea

def DrawBitmapRect(*args) -> "void" :
  return _inkview.DrawBitmapRect(*args)
DrawBitmapRect = _inkview.DrawBitmapRect

def DrawBitmapRect2(*args) -> "void" :
  return _inkview.DrawBitmapRect2(*args)
DrawBitmapRect2 = _inkview.DrawBitmapRect2

def StretchBitmap(*args) -> "void" :
  return _inkview.StretchBitmap(*args)
StretchBitmap = _inkview.StretchBitmap

def EnumFonts() -> "char **" :
  return _inkview.EnumFonts()
EnumFonts = _inkview.EnumFonts

def OpenFont(*args) -> "ifont *" :
  return _inkview.OpenFont(*args)
OpenFont = _inkview.OpenFont

def CloseFont(*args) -> "void" :
  return _inkview.CloseFont(*args)
CloseFont = _inkview.CloseFont

def SetFont(*args) -> "void" :
  return _inkview.SetFont(*args)
SetFont = _inkview.SetFont

def DrawString(*args) -> "void" :
  return _inkview.DrawString(*args)
DrawString = _inkview.DrawString

def DrawStringR(*args) -> "void" :
  return _inkview.DrawStringR(*args)
DrawStringR = _inkview.DrawStringR

def TextRectHeight(*args) -> "int" :
  return _inkview.TextRectHeight(*args)
TextRectHeight = _inkview.TextRectHeight

def DrawTextRect(*args) -> "char *" :
  return _inkview.DrawTextRect(*args)
DrawTextRect = _inkview.DrawTextRect

def DrawTextRect2(*args) -> "char *" :
  return _inkview.DrawTextRect2(*args)
DrawTextRect2 = _inkview.DrawTextRect2

def CharWidth(*args) -> "int" :
  return _inkview.CharWidth(*args)
CharWidth = _inkview.CharWidth

def StringWidth(*args) -> "int" :
  return _inkview.StringWidth(*args)
StringWidth = _inkview.StringWidth

def DrawSymbol(*args) -> "int" :
  return _inkview.DrawSymbol(*args)
DrawSymbol = _inkview.DrawSymbol

def RegisterFontList(*args) -> "void" :
  return _inkview.RegisterFontList(*args)
RegisterFontList = _inkview.RegisterFontList

def FullUpdate() -> "void" :
  return _inkview.FullUpdate()
FullUpdate = _inkview.FullUpdate

def SoftUpdate() -> "void" :
  return _inkview.SoftUpdate()
SoftUpdate = _inkview.SoftUpdate

def PartialUpdate(*args) -> "void" :
  return _inkview.PartialUpdate(*args)
PartialUpdate = _inkview.PartialUpdate

def PartialUpdateBW(*args) -> "void" :
  return _inkview.PartialUpdateBW(*args)
PartialUpdateBW = _inkview.PartialUpdateBW

def FineUpdate() -> "void" :
  return _inkview.FineUpdate()
FineUpdate = _inkview.FineUpdate

def FineUpdateSupported() -> "int" :
  return _inkview.FineUpdateSupported()
FineUpdateSupported = _inkview.FineUpdateSupported

def SetHardTimer(*args) -> "void" :
  return _inkview.SetHardTimer(*args)
SetHardTimer = _inkview.SetHardTimer

def SetWeakTimer(*args) -> "void" :
  return _inkview.SetWeakTimer(*args)
SetWeakTimer = _inkview.SetWeakTimer

def ClearTimer(*args) -> "void" :
  return _inkview.ClearTimer(*args)
ClearTimer = _inkview.ClearTimer

def EnumKeyboards() -> "char **" :
  return _inkview.EnumKeyboards()
EnumKeyboards = _inkview.EnumKeyboards

def LoadKeyboard(*args) -> "void" :
  return _inkview.LoadKeyboard(*args)
LoadKeyboard = _inkview.LoadKeyboard

def OpenCustomKeyboard(*args) -> "void" :
  return _inkview.OpenCustomKeyboard(*args)
OpenCustomKeyboard = _inkview.OpenCustomKeyboard

def CloseKeyboard() -> "void" :
  return _inkview.CloseKeyboard()
CloseKeyboard = _inkview.CloseKeyboard

def SwitchBookmark(*args) -> "void" :
  return _inkview.SwitchBookmark(*args)
SwitchBookmark = _inkview.SwitchBookmark

def Message(*args) -> "void" :
  return _inkview.Message(*args)
Message = _inkview.Message

def CloseDialog() -> "void" :
  return _inkview.CloseDialog()
CloseDialog = _inkview.CloseDialog

def ShowHourglass() -> "void" :
  return _inkview.ShowHourglass()
ShowHourglass = _inkview.ShowHourglass

def ShowHourglassAt(*args) -> "void" :
  return _inkview.ShowHourglassAt(*args)
ShowHourglassAt = _inkview.ShowHourglassAt

def HideHourglass() -> "void" :
  return _inkview.HideHourglass()
HideHourglass = _inkview.HideHourglass

def DisableExitHourglass() -> "void" :
  return _inkview.DisableExitHourglass()
DisableExitHourglass = _inkview.DisableExitHourglass

def DrawPanel(*args) -> "int" :
  return _inkview.DrawPanel(*args)
DrawPanel = _inkview.DrawPanel

def DrawTabs(*args) -> "void" :
  return _inkview.DrawTabs(*args)
DrawTabs = _inkview.DrawTabs

def PanelHeight() -> "int" :
  return _inkview.PanelHeight()
PanelHeight = _inkview.PanelHeight

def SetKeyboardRate(*args) -> "void" :
  return _inkview.SetKeyboardRate(*args)
SetKeyboardRate = _inkview.SetKeyboardRate

def GetGlobalConfig() -> "iconfig *" :
  return _inkview.GetGlobalConfig()
GetGlobalConfig = _inkview.GetGlobalConfig

def OpenConfig(*args) -> "iconfig *" :
  return _inkview.OpenConfig(*args)
OpenConfig = _inkview.OpenConfig

def SaveConfig(*args) -> "int" :
  return _inkview.SaveConfig(*args)
SaveConfig = _inkview.SaveConfig

def CloseConfig(*args) -> "void" :
  return _inkview.CloseConfig(*args)
CloseConfig = _inkview.CloseConfig

def ReadInt(*args) -> "int" :
  return _inkview.ReadInt(*args)
ReadInt = _inkview.ReadInt

def ReadString(*args) -> "char *" :
  return _inkview.ReadString(*args)
ReadString = _inkview.ReadString

def WriteInt(*args) -> "void" :
  return _inkview.WriteInt(*args)
WriteInt = _inkview.WriteInt

def WriteString(*args) -> "void" :
  return _inkview.WriteString(*args)
WriteString = _inkview.WriteString

def OpenConfigEditor(*args) -> "void" :
  return _inkview.OpenConfigEditor(*args)
OpenConfigEditor = _inkview.OpenConfigEditor

def GetKeyMapping(*args) -> "void" :
  return _inkview.GetKeyMapping(*args)
GetKeyMapping = _inkview.GetKeyMapping

def QueryDeviceButtons() -> "unsigned long" :
  return _inkview.QueryDeviceButtons()
QueryDeviceButtons = _inkview.QueryDeviceButtons

def hash_new(*args) -> "ihash *" :
  return _inkview.hash_new(*args)
hash_new = _inkview.hash_new

def hash_add(*args) -> "void" :
  return _inkview.hash_add(*args)
hash_add = _inkview.hash_add

def hash_delete(*args) -> "void" :
  return _inkview.hash_delete(*args)
hash_delete = _inkview.hash_delete

def hash_find(*args) -> "char *" :
  return _inkview.hash_find(*args)
hash_find = _inkview.hash_find

def vhash_new(*args) -> "ihash *" :
  return _inkview.vhash_new(*args)
vhash_new = _inkview.vhash_new

def vhash_add(*args) -> "void" :
  return _inkview.vhash_add(*args)
vhash_add = _inkview.vhash_add

def vhash_delete(*args) -> "void" :
  return _inkview.vhash_delete(*args)
vhash_delete = _inkview.vhash_delete

def vhash_find(*args) -> "void *" :
  return _inkview.vhash_find(*args)
vhash_find = _inkview.vhash_find

def hash_clear(*args) -> "void" :
  return _inkview.hash_clear(*args)
hash_clear = _inkview.hash_clear

def hash_destroy(*args) -> "void" :
  return _inkview.hash_destroy(*args)
hash_destroy = _inkview.hash_destroy

def hash_count(*args) -> "int" :
  return _inkview.hash_count(*args)
hash_count = _inkview.hash_count

def hash_enumerate(*args) -> "void" :
  return _inkview.hash_enumerate(*args)
hash_enumerate = _inkview.hash_enumerate

def EnumLanguages() -> "char **" :
  return _inkview.EnumLanguages()
EnumLanguages = _inkview.EnumLanguages

def LoadLanguage(*args) -> "void" :
  return _inkview.LoadLanguage(*args)
LoadLanguage = _inkview.LoadLanguage

def AddTranslation(*args) -> "void" :
  return _inkview.AddTranslation(*args)
AddTranslation = _inkview.AddTranslation

def GetLangText(*args) -> "char *" :
  return _inkview.GetLangText(*args)
GetLangText = _inkview.GetLangText

def GetLangTextF(*args) -> "char *" :
  return _inkview.GetLangTextF(*args)
GetLangTextF = _inkview.GetLangTextF

def EnumThemes() -> "char **" :
  return _inkview.EnumThemes()
EnumThemes = _inkview.EnumThemes

def OpenTheme(*args) -> "void" :
  return _inkview.OpenTheme(*args)
OpenTheme = _inkview.OpenTheme

def GetResource(*args) -> "ibitmap *" :
  return _inkview.GetResource(*args)
GetResource = _inkview.GetResource

def GetThemeInt(*args) -> "int" :
  return _inkview.GetThemeInt(*args)
GetThemeInt = _inkview.GetThemeInt

def GetThemeString(*args) -> "char *" :
  return _inkview.GetThemeString(*args)
GetThemeString = _inkview.GetThemeString

def GetThemeFont(*args) -> "ifont *" :
  return _inkview.GetThemeFont(*args)
GetThemeFont = _inkview.GetThemeFont

def GetThemeRect(*args) -> "void" :
  return _inkview.GetThemeRect(*args)
GetThemeRect = _inkview.GetThemeRect

def GetSupportedFileTypes() -> "iv_filetype *" :
  return _inkview.GetSupportedFileTypes()
GetSupportedFileTypes = _inkview.GetSupportedFileTypes

def GetBookInfo(*args) -> "bookinfo *" :
  return _inkview.GetBookInfo(*args)
GetBookInfo = _inkview.GetBookInfo

def GetBookCover(*args) -> "ibitmap *" :
  return _inkview.GetBookCover(*args)
GetBookCover = _inkview.GetBookCover

def GetAssociatedFile(*args) -> "char *" :
  return _inkview.GetAssociatedFile(*args)
GetAssociatedFile = _inkview.GetAssociatedFile

def CheckAssociatedFile(*args) -> "char *" :
  return _inkview.CheckAssociatedFile(*args)
CheckAssociatedFile = _inkview.CheckAssociatedFile

def SetReadMarker(*args) -> "void" :
  return _inkview.SetReadMarker(*args)
SetReadMarker = _inkview.SetReadMarker

def FileType(*args) -> "iv_filetype *" :
  return _inkview.FileType(*args)
FileType = _inkview.FileType

def OpenBook(*args) -> "void" :
  return _inkview.OpenBook(*args)
OpenBook = _inkview.OpenBook

def BookReady(*args) -> "void" :
  return _inkview.BookReady(*args)
BookReady = _inkview.BookReady

def GetLastOpen() -> "char **" :
  return _inkview.GetLastOpen()
GetLastOpen = _inkview.GetLastOpen

def AddLastOpen(*args) -> "void" :
  return _inkview.AddLastOpen(*args)
AddLastOpen = _inkview.AddLastOpen

def OpenLastBooks() -> "void" :
  return _inkview.OpenLastBooks()
OpenLastBooks = _inkview.OpenLastBooks

def EnumNotepads() -> "char **" :
  return _inkview.EnumNotepads()
EnumNotepads = _inkview.EnumNotepads

def OpenNotepad(*args) -> "void" :
  return _inkview.OpenNotepad(*args)
OpenNotepad = _inkview.OpenNotepad

def CreateNote(*args) -> "void" :
  return _inkview.CreateNote(*args)
CreateNote = _inkview.CreateNote

def CreateNoteFromImages(*args) -> "void" :
  return _inkview.CreateNoteFromImages(*args)
CreateNoteFromImages = _inkview.CreateNoteFromImages

def CreateNoteFromPage(*args) -> "void" :
  return _inkview.CreateNoteFromPage(*args)
CreateNoteFromPage = _inkview.CreateNoteFromPage

def OpenNotesMenu(*args) -> "void" :
  return _inkview.OpenNotesMenu(*args)
OpenNotesMenu = _inkview.OpenNotesMenu

def EnumDictionaries() -> "char **" :
  return _inkview.EnumDictionaries()
EnumDictionaries = _inkview.EnumDictionaries

def OpenDictionary(*args) -> "int" :
  return _inkview.OpenDictionary(*args)
OpenDictionary = _inkview.OpenDictionary

def CloseDictionary() -> "void" :
  return _inkview.CloseDictionary()
CloseDictionary = _inkview.CloseDictionary

def LookupWord(*args) -> "int" :
  return _inkview.LookupWord(*args)
LookupWord = _inkview.LookupWord

def LookupWordExact(*args) -> "int" :
  return _inkview.LookupWordExact(*args)
LookupWordExact = _inkview.LookupWordExact

def LookupPrevious(*args) -> "int" :
  return _inkview.LookupPrevious(*args)
LookupPrevious = _inkview.LookupPrevious

def LookupNext(*args) -> "int" :
  return _inkview.LookupNext(*args)
LookupNext = _inkview.LookupNext

def OpenDictionaryView(*args) -> "void" :
  return _inkview.OpenDictionaryView(*args)
OpenDictionaryView = _inkview.OpenDictionaryView

def iv_reflow_start(*args) -> "void" :
  return _inkview.iv_reflow_start(*args)
iv_reflow_start = _inkview.iv_reflow_start

def iv_reflow_bt() -> "void" :
  return _inkview.iv_reflow_bt()
iv_reflow_bt = _inkview.iv_reflow_bt

def iv_reflow_et() -> "void" :
  return _inkview.iv_reflow_et()
iv_reflow_et = _inkview.iv_reflow_et

def iv_reflow_div() -> "void" :
  return _inkview.iv_reflow_div()
iv_reflow_div = _inkview.iv_reflow_div

def iv_reflow_addchar(*args) -> "void" :
  return _inkview.iv_reflow_addchar(*args)
iv_reflow_addchar = _inkview.iv_reflow_addchar

def iv_reflow_addimage(*args) -> "void" :
  return _inkview.iv_reflow_addimage(*args)
iv_reflow_addimage = _inkview.iv_reflow_addimage

def iv_reflow_subpages() -> "int" :
  return _inkview.iv_reflow_subpages()
iv_reflow_subpages = _inkview.iv_reflow_subpages

def iv_reflow_render(*args) -> "void" :
  return _inkview.iv_reflow_render(*args)
iv_reflow_render = _inkview.iv_reflow_render

def iv_reflow_getchar(*args) -> "int" :
  return _inkview.iv_reflow_getchar(*args)
iv_reflow_getchar = _inkview.iv_reflow_getchar

def iv_reflow_getimage(*args) -> "int" :
  return _inkview.iv_reflow_getimage(*args)
iv_reflow_getimage = _inkview.iv_reflow_getimage

def iv_reflow_words() -> "int" :
  return _inkview.iv_reflow_words()
iv_reflow_words = _inkview.iv_reflow_words

def iv_reflow_getword(*args) -> "char *" :
  return _inkview.iv_reflow_getword(*args)
iv_reflow_getword = _inkview.iv_reflow_getword

def iv_reflow_clear() -> "void" :
  return _inkview.iv_reflow_clear()
iv_reflow_clear = _inkview.iv_reflow_clear

def GetBatteryPower() -> "int" :
  return _inkview.GetBatteryPower()
GetBatteryPower = _inkview.GetBatteryPower

def GetTemperature() -> "int" :
  return _inkview.GetTemperature()
GetTemperature = _inkview.GetTemperature

def IsCharging() -> "int" :
  return _inkview.IsCharging()
IsCharging = _inkview.IsCharging

def IsUSBconnected() -> "int" :
  return _inkview.IsUSBconnected()
IsUSBconnected = _inkview.IsUSBconnected

def IsSDinserted() -> "int" :
  return _inkview.IsSDinserted()
IsSDinserted = _inkview.IsSDinserted

def IsPlayingMP3() -> "int" :
  return _inkview.IsPlayingMP3()
IsPlayingMP3 = _inkview.IsPlayingMP3

def IsKeyPressed(*args) -> "int" :
  return _inkview.IsKeyPressed(*args)
IsKeyPressed = _inkview.IsKeyPressed

def SetRTCtime(*args) -> "void" :
  return _inkview.SetRTCtime(*args)
SetRTCtime = _inkview.SetRTCtime

def GetDeviceModel() -> "char *" :
  return _inkview.GetDeviceModel()
GetDeviceModel = _inkview.GetDeviceModel

def GetHardwareType() -> "char *" :
  return _inkview.GetHardwareType()
GetHardwareType = _inkview.GetHardwareType

def GetSoftwareVersion() -> "char *" :
  return _inkview.GetSoftwareVersion()
GetSoftwareVersion = _inkview.GetSoftwareVersion

def GetHardwareDepth() -> "int" :
  return _inkview.GetHardwareDepth()
GetHardwareDepth = _inkview.GetHardwareDepth

def GetSerialNumber() -> "char *" :
  return _inkview.GetSerialNumber()
GetSerialNumber = _inkview.GetSerialNumber

def GetWaveformFilename() -> "char *" :
  return _inkview.GetWaveformFilename()
GetWaveformFilename = _inkview.GetWaveformFilename

def GetDeviceKey() -> "char *" :
  return _inkview.GetDeviceKey()
GetDeviceKey = _inkview.GetDeviceKey

def CurrentDateStr() -> "char *" :
  return _inkview.CurrentDateStr()
CurrentDateStr = _inkview.CurrentDateStr

def DateStr(*args) -> "char *" :
  return _inkview.DateStr(*args)
DateStr = _inkview.DateStr

def GoSleep(*args) -> "int" :
  return _inkview.GoSleep(*args)
GoSleep = _inkview.GoSleep

def SetAutoPowerOff(*args) -> "void" :
  return _inkview.SetAutoPowerOff(*args)
SetAutoPowerOff = _inkview.SetAutoPowerOff

def PowerOff() -> "void" :
  return _inkview.PowerOff()
PowerOff = _inkview.PowerOff

def SafeMode() -> "int" :
  return _inkview.SafeMode()
SafeMode = _inkview.SafeMode

def OpenMainMenu() -> "void" :
  return _inkview.OpenMainMenu()
OpenMainMenu = _inkview.OpenMainMenu

def WriteStartupLogo(*args) -> "int" :
  return _inkview.WriteStartupLogo(*args)
WriteStartupLogo = _inkview.WriteStartupLogo

def InkViewMain(*args) -> "void" :
  return _inkview.InkViewMain(*args)
InkViewMain = _inkview.InkViewMain

def SetEventHandler(*args) -> "PyObject *" :
  return _inkview.SetEventHandler(*args)
SetEventHandler = _inkview.SetEventHandler

def GetEventHandler() -> "PyObject *" :
  return _inkview.GetEventHandler()
GetEventHandler = _inkview.GetEventHandler

def PySendEvent(*args) -> "void" :
  return _inkview.PySendEvent(*args)
PySendEvent = _inkview.PySendEvent

def OpenMenu(*args) -> "void" :
  return _inkview.OpenMenu(*args)
OpenMenu = _inkview.OpenMenu

def OpenMenu3x3(*args) -> "void" :
  return _inkview.OpenMenu3x3(*args)
OpenMenu3x3 = _inkview.OpenMenu3x3

def Dialog(*args) -> "void" :
  return _inkview.Dialog(*args)
Dialog = _inkview.Dialog

def OpenKeyboard(*args) -> "void" :
  return _inkview.OpenKeyboard(*args)
OpenKeyboard = _inkview.OpenKeyboard

def OpenDirectorySelector(*args) -> "void" :
  return _inkview.OpenDirectorySelector(*args)
OpenDirectorySelector = _inkview.OpenDirectorySelector

def OpenContents(*args) -> "void" :
  return _inkview.OpenContents(*args)
OpenContents = _inkview.OpenContents

def OpenPageSelector(*args) -> "void" :
  return _inkview.OpenPageSelector(*args)
OpenPageSelector = _inkview.OpenPageSelector

def OpenRotateBox(*args) -> "void" :
  return _inkview.OpenRotateBox(*args)
OpenRotateBox = _inkview.OpenRotateBox

def OpenTimeEdit(*args) -> "void" :
  return _inkview.OpenTimeEdit(*args)
OpenTimeEdit = _inkview.OpenTimeEdit

def OpenFontSelector(*args) -> "void" :
  return _inkview.OpenFontSelector(*args)
OpenFontSelector = _inkview.OpenFontSelector

def OpenList(*args) -> "void" :
  return _inkview.OpenList(*args)
OpenList = _inkview.OpenList

def OpenDummyList(*args) -> "void" :
  return _inkview.OpenDummyList(*args)
OpenDummyList = _inkview.OpenDummyList

cvar = _inkview.cvar

